import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
from datetime import datetime
from chat_history import ChatHistory
from config import TELEGRAM_TOKEN, OPENAI_API_KEY, SYSTEM_PROMPT

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class MarketingPalBot:
    def __init__(self):
        self.app = Application.builder().token(TELEGRAM_TOKEN).build()
        self.user_states = {}
        self.chat_history = ChatHistory()
        self.client = OpenAI(api_key=OPENAI_API_KEY)

    async def run(self):
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.app.add_handler(CommandHandler("start", self.start_command))
            self.app.add_handler(CommandHandler("help", self.help_command))
            self.app.add_handler(CommandHandler("newpersona", self.new_persona_command))
            self.app.add_handler(CommandHandler("history", self.show_history_command))
            self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            print("ü§ñ MarketingPal –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
            await self.app.initialize()
            await self.app.start()
            
            # –ó–∞–ø—É—Å–∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
            try:
                await self.app.updater.start_polling(drop_pending_updates=True)
                # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
                while True:
                    await asyncio.sleep(3600)  # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π sleep –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            except asyncio.CancelledError:
                print("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")
            raise
        finally:
            await self.stop()

    async def stop(self):
        try:
            await self.app.stop()
            await self.app.shutdown()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {str(e)}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_message = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø MarketingPal - –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –ø–µ—Ä—Å–æ–Ω.\n\n"
            "üéØ –Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
            "- –°–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
            "- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –±–æ–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            "- –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /newpersona —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–µ—Ä—Å–æ–Ω—ã."
        )
        await update.message.reply_text(welcome_message)
        self.chat_history.add_message(update.effective_user.id, "–ö–æ–º–∞–Ω–¥–∞ /start", False)
        self.chat_history.add_message(update.effective_user.id, welcome_message, True)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_message = (
            "ü§ñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MarketingPal:\n\n"
            "1. /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "2. /newpersona - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ø–µ—Ä—Å–æ–Ω—É\n"
            "3. /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "4. /history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –≤–∞—à–µ–π —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏."
        )
        await update.message.reply_text(help_message)
        self.chat_history.add_message(update.effective_user.id, "–ö–æ–º–∞–Ω–¥–∞ /help", False)
        self.chat_history.add_message(update.effective_user.id, help_message, True)

    async def new_persona_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        self.user_states[user_id] = {"stage": "business_info"}

        persona_message = (
            "üìä –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ø–µ—Ä—Å–æ–Ω—É!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ:\n"
            "- –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?\n"
            "- –ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —É—Å–ª—É–≥—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?\n"
            "- –ö—Ç–æ, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –≤–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?"
        )
        await update.message.reply_text(persona_message)
        self.chat_history.add_message(update.effective_user.id, "–ö–æ–º–∞–Ω–¥–∞ /newpersona", False)
        self.chat_history.add_message(update.effective_user.id, persona_message, True)

    async def show_history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        history = self.chat_history.get_user_history(user_id)

        if not history:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        message = "üìù –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
        for entry in history[-10:]:
            time = datetime.fromisoformat(entry['timestamp']).strftime('%Y-%m-%d %H:%M')
            who = "ü§ñ –ë–æ—Ç" if entry['is_bot'] else "üë§ –í—ã"
            message += f"{time} {who}:\n{entry['message']}\n\n"

        await update.message.reply_text(message)
        self.chat_history.add_message(user_id, "–ö–æ–º–∞–Ω–¥–∞ /history", False)
        self.chat_history.add_message(user_id, message, True)

    def get_gpt4mini_response(self, text: str, user_id: int) -> str:
        try:
            stage = self.user_states.get(user_id, {}).get("stage", "general")

            messages = [
                {
                    "role": "system",
                    "content": [{"type": "text", "text": SYSTEM_PROMPT}]
                },
                {
                    "role": "user",
                    "content": [{"type": "text", "text": text}]
                }
            ]

            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                temperature=0.7,
                max_tokens=800,
                top_p=1
            )
            return response.choices[0].message.content
        except Exception as e:
            logging.error(f"Error in GPT-4-mini request: {str(e)}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        message_text = update.message.text

        self.chat_history.add_message(user_id, message_text, False)
        await update.message.chat.send_action(action="typing")
        response = self.get_gpt4mini_response(message_text, user_id)
        self.chat_history.add_message(user_id, response, True)
        await update.message.reply_text(response)